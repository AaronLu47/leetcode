/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
static int speedup = [](){
    std::ios::sync_with_stdio(0);
    std::cin.tie(0);
    return 0;
}();
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        map<int, int> m;
        for (int i = 0; i < lists.size(); i++) {
            while (lists[i]) {
                map<int,int>::iterator it = m.find(lists[i]->val);
                if (it == m.end()) {
                    //未曾出现过的num
                    m.insert({lists[i]->val, 1});
                }
                else m[lists[i]->val]++;
                lists[i] = lists[i]->next;
            }
        }
        ListNode* head = new ListNode(0);
        ListNode* curr = head;
        for (auto it = m.begin(); it != m.end(); it++) {
            for (int i = 0; i < it->second; i++) {
                ListNode* tmp = new ListNode(0);
                tmp->val = it->first;
                curr->next = tmp;
                curr = curr->next;
            }
        }
        return head->next;
    }
};
