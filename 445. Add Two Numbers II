/**
 * You are given two non-empty linked lists representing two non-negative integers.
 * The most significant digit comes first and each of their nodes contain a single digit. 
 * Add the two numbers and return it as a linked list.
 * You may assume the two numbers do not contain any leading zero, except the number 0 itself.
 * Follow up: What if you cannot modify the input lists? In other words, reversing the lists is not allowed.
 * 
 * Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
 * Output: 7 -> 8 -> 0 -> 7
*/

static int speed = [](){
    std::ios::sync_with_stdio();
    std::cin.tie(0);
    return 0;
}();


class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        vector<int> num1;
        vector<int> num2;
        while (l1 || l2) {
            if (l1) {
                num1.push_back(l1->val);
                l1 = l1->next;
            }
            if (l2) {
                num2.push_back(l2->val);
                l2 = l2->next;
            }
        }
        int flag = 0;  //进位
        ListNode* head = new ListNode(0);
        for (int i=num1.size()-1, j=num2.size()-1; i>=0 || j>=0; i--, j--) {
            ListNode* tmp = head->next;
            if (i>=0 && j>=0) {
                head->next = new ListNode((num1[i]+num2[j]+flag)%10);
                flag = (num1[i] + num2[j] + flag) / 10;
            }
            else if (i>=0) {
                head->next = new ListNode((num1[i]+flag)%10);
                flag = (num1[i] + flag) / 10;
            }
            else {
                head->next = new ListNode((num2[j]+flag)%10);
                flag = (num2[j] + flag) / 10;
            }
            head->next->next = tmp;
        }
        if (flag) {
            ListNode* tmp = head->next;
            head->next = new ListNode(1);
            head->next->next = tmp;
        }
        return head->next;
    }
};
