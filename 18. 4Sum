/**
 * Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.
 * A solution set is:
 * [
 *  [-1,  0, 0, 1],
 *  [-2, -1, 1, 2],
 *  [-2,  0, 0, 2]
 * ]
*/

static int speed = [](){
    std::ios::sync_with_stdio();
    std::cin.tie(0);
    return 0;
}();


class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> res;
        int len = nums.size();
        if (len<4) return res;
        sort(nums.begin(), nums.end());
        for (int i=0; i<len-3; i++) {
            if (i>0 && nums[i]==nums[i-1]) continue;
            if (nums[i]+nums[i+1]+nums[i+2]+nums[i+3] > target) break;
            if (nums[i]+nums[len-1]+nums[len-2]+nums[len-3] < target) continue;
            for (int j=i+1; j<len-2; j++) {
                if (j>i+1 && nums[j]==nums[j-1]) continue;
                if (nums[i]+nums[j]+nums[j+1]+nums[j+2] > target) break;
                if (nums[i]+nums[j]+nums[len-1]+nums[len-2] < target) continue;
                int l = j+1;
                int r = len-1;
                while (l<r) {
                    int sum = nums[i]+nums[j]+nums[l]+nums[r];
                    if (sum==target) {
                        res.push_back({nums[i],nums[j],nums[l],nums[r]});
                        l++; r--;
                        while (l<r && nums[l]==nums[l-1]) l++;
                        while (l<r && nums[r]==nums[r+1]) r--;
                    }
                    else if (sum < target) {
                        l++;
                        while (l<r && nums[l]==nums[l-1]) l++;
                    }
                    else {
                        r--;
                        while (l<r && nums[r]==nums[r+1]) r--;
                    }
                }
            }
        }
        return res;
    }
};
